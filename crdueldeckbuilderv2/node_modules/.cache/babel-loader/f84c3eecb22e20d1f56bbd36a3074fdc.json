{"ast":null,"code":"var _jsxFileName = \"/home/pazuzu/Documents/prog/react/tcc-pazuzu/src/components/enemyDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport EnemyCard from './enemyCard.js';\nimport cards from '../utils/card-data.js';\nimport elixirImg from '../img/elixir.png';\nimport elixirCycleImg from '../img/elixir-cycle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnemyDeck = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [hasCopiedLink, setHasCopiedLink] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [cardArrayPositions, setCardArrayPositions] = useState([]);\n  const [isDeckTransparent, setIsDeckTransparent] = useState(false);\n  const [highlightedCardNum, setHighlightedCardNum] = useState(null);\n  const [repeatedCardsWithDeckList, setRepeatedCardsWithDeckList] = useState([]);\n  const [currentMode, setCurrentMode] = useState('player');\n  const copyDeckInputRef = useRef();\n  useEffect(() => {\n    if (hasCopiedLink) {\n      if (props.deckNum === 2 && !isDeckTransparent) {\n        let repeatedCardNumDeck1 = findRepeatedCard(props.otherDecksRef[0]);\n        console.log(repeatedCardNumDeck1);\n\n        if (repeatedCardNumDeck1 !== -1) {\n          changeToHighlight(repeatedCardNumDeck1, props.otherDecksRef[0]); // repeatedCardsWithDeckList.push(1);\n          // setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n          // console.log(cardArrayPositions)\n          // console.log(props.otherDecksRef[0].current.getCurrentDeck())\t\t\t\t\t\n        }\n      } else if (props.deckNum === 3 && !isDeckTransparent) {\n        let repeatedCardNumDeck1 = findRepeatedCard(props.otherDecksRef[0]);\n\n        if (repeatedCardNumDeck1 !== -1) {\n          changeToHighlight(repeatedCardNumDeck1, props.otherDecksRef[0]); // repeatedCardsWithDeckList.push(1);\n          // setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n        }\n\n        let repeatedCardNumDeck2 = findRepeatedCard(props.otherDecksRef[1]);\n\n        if (repeatedCardNumDeck2 !== -1) {\n          changeToHighlight(repeatedCardNumDeck2, props.otherDecksRef[1]); // repeatedCardsWithDeckList.push(2);\n          // setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n        }\n      }\n    }\n  });\n  useImperativeHandle(ref, () => ({\n    getCurrentDeck: () => {\n      return cardArrayPositions;\n    },\n    getIsTransparent: () => {\n      return isDeckTransparent;\n    },\n    setIsDeckTransparent: transparent => {\n      setIsDeckTransparent(transparent);\n    },\n    highlightCard: cardNum => {\n      setIsDeckTransparent(true);\n      setHighlightedCardNum(cardNum);\n    },\n    adjustPairedDeckTransparency: () => {\n      if (repeatedCardsWithDeckList.length > 0) {} else {\n        setIsDeckTransparent(false);\n      }\n    },\n    changeCurrentMode: newMode => {\n      setCurrentMode(newMode);\n    }\n  }));\n\n  const changeToHighlight = (repeatedCard, deckRef) => {\n    setIsDeckTransparent(true);\n    deckRef.current.setIsDeckTransparent(true);\n    props.funcUtils.changeRepeatedCardsList('add', repeatedCard);\n    console.log(cardArrayPositions);\n    console.log(props.otherDecksRef[0].current.getCurrentDeck()); // setHighlightedCardNum(repeatedCard);\t\t\n  };\n\n  const findRepeatedCard = deckRef => {\n    let analysedDeck = deckRef.current.getCurrentDeck();\n\n    for (let i = 0; i < cardArrayPositions.length; i++) {\n      for (let j = 0; j < analysedDeck.length; j++) {\n        if (cardArrayPositions[i] === analysedDeck[j]) {\n          return cardArrayPositions[i];\n        }\n      }\n    }\n\n    return -1;\n  };\n\n  const cardIdToCardPosition = id => {\n    for (let i = 0; i < cards.items.length; i++) {\n      if (cards.items[i].id === id) {\n        return i;\n      }\n    }\n  };\n\n  const validateInputLink = value => {\n    if (props.deckNum === 2 && props.otherDecksRef[0].current.getCurrentDeck().length === 0) {\n      alert('Please copy decks from top slot to bottom');\n      copyDeckInputRef.current.value = '';\n      return;\n    }\n\n    if (props.deckNum === 3 && (props.otherDecksRef[0].current.getCurrentDeck().length === 0 || props.otherDecksRef[1].current.getCurrentDeck().length === 0)) {\n      alert('Please copy decks from top slot to bottom');\n      copyDeckInputRef.current.value = '';\n      return;\n    }\n\n    if (value.search('https://link.clashroyale.com/deck/') === -1) return;\n    let sepPos = value.search('=');\n    if (sepPos === -1) return;\n    let cardIds = value.substring(sepPos + 1).split(';').map(Number);\n    let cap = cardIds.map(id => cardIdToCardPosition(id));\n    setHasCopiedLink(true);\n    setCardArrayPositions(cap);\n    props.cardSelectorRef.current.changeEnemySelectionList('add', cap);\n  };\n\n  const deleteDeck = () => {\n    if (props.deckNum === 1 && (props.otherDecksRef[0].current.getCurrentDeck().length > 0 || props.otherDecksRef[1].current.getCurrentDeck().length > 0)) {\n      alert('Please delete decks from bottom to top');\n      return;\n    }\n\n    if (props.deckNum === 2 && props.otherDecksRef[1].current.getCurrentDeck().length > 0) {\n      alert('Please delete decks from bottom to top');\n      return;\n    }\n\n    let hasCommonCardWithDeck1 = false;\n    let hasCommonCardWithDeck2 = false;\n    let deck1HasCommonCardWithDeck2 = false;\n\n    if (props.deckNum === 3) {\n      let deck1 = props.otherDecksRef[1].current.getCurrentDeck();\n      let deck0 = props.otherDecksRef[0].current.getCurrentDeck();\n      let cardRemoveList = [];\n\n      for (let i = 0; i < deck1.length; i++) {\n        if (cardArrayPositions.indexOf(deck1[i]) !== -1) {\n          if (!deck0.includes(deck1[i])) {\n            cardRemoveList.push(deck1[i]);\n          }\n\n          hasCommonCardWithDeck2 = true;\n        }\n      }\n\n      for (let i = 0; i < deck0.length; i++) {\n        if (cardArrayPositions.indexOf(deck0[i]) !== -1) {\n          if (!deck1.includes(deck0[i])) {\n            cardRemoveList.push(deck0[i]);\n          }\n\n          hasCommonCardWithDeck1 = true;\n        }\n      }\n\n      for (let i = 0; i < deck0.length; i++) {\n        if (deck0.indexOf(deck1[i]) !== -1) {\n          deck1HasCommonCardWithDeck2 = true;\n          break;\n        }\n      }\n\n      if (!deck1HasCommonCardWithDeck2) {\n        if (hasCommonCardWithDeck1) props.otherDecksRef[0].current.setIsDeckTransparent(false);\n        if (hasCommonCardWithDeck2) props.otherDecksRef[1].current.setIsDeckTransparent(false);\n      }\n\n      cardRemoveList.map(e => {\n        if (deck0.includes(e) || deck1.includes(e)) {\n          cardArrayPositions.splice(cardArrayPositions.indexOf(e), 1);\n        }\n      });\n      cardArrayPositions.map(e => {\n        if (deck0.includes(e) || deck1.includes(e)) {\n          cardArrayPositions.splice(cardArrayPositions.indexOf(e), 1);\n        }\n      });\n      /*\n      \t\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n      \t\t\t\tif (cardRemoveList.indexOf(cardArrayPositions[i]) !== -1 &&\n      \t\t\t\t\t\t\t\t  (!deck0.includes(cardArrayPositions[i]) && !deck1.includes(cardArrayPositions[i]))\n      \t\t\t\t\t\t\t\t  ) {\n      \t\t\t\t\tconsole.log('indice da carta a ser removida: ' + String(cardArrayPositions.indexOf(cardArrayPositions[i])))\n      \t\t\t\t\tconsole.log('carta a ser removida: ' + String(cardArrayPositions[i]) + ' ' + cards['items'][cardArrayPositions[i]]['name'])\n      \t\t\t\t\tconsole.log(cardArrayPositions)\n      \t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[i]), 1);\t\t\t\t\t\n      \t\t\t\t\tconsole.log(cardArrayPositions)\n      \t\t\t\t}\n      \t\t\t}\n      */\n\n      cardRemoveList.map(e => console.log(cards['items'][e]['name']));\n      props.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n      cardRemoveList.map(e => props.funcUtils.changeRepeatedCardsList('remove', e));\n    } else if (props.deckNum === 2) {\n      let deck0 = props.otherDecksRef[0].current.getCurrentDeck();\n      let cardRemoveList = [];\n\n      for (let i = 0; i < deck0.length; i++) {\n        if (cardArrayPositions.indexOf(deck0[i]) !== -1) {\n          cardRemoveList.push(deck0[i]);\n        }\n      }\n\n      for (let i = 0; i < cardArrayPositions.length; i++) {\n        if (cardRemoveList.indexOf(cardArrayPositions[i]) !== -1) {\n          cardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[i]), 1);\n        }\n      }\n\n      props.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n      props.otherDecksRef[0].current.setIsDeckTransparent(false);\n      cardRemoveList.map(e => props.funcUtils.changeRepeatedCardsList('remove', e));\n    } else if (props.deckNum === 1) {\n      props.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n    } // props.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\n\n    setCardArrayPositions([]);\n    setHasCopiedLink(false);\n    if (isDeckTransparent) setIsDeckTransparent(false); // TODO\n    // checar quais cartas sao iguais em quais decks\n    // if (carta esta em um deck e no outro nao)\n    // setar para transparente ou nao de acordo\n  };\n\n  const getDeckCostArray = () => {\n    let deckCostArray = [];\n\n    for (let i = 0; i < cardArrayPositions.length; i++) {\n      deckCostArray.push(cards['items'][cardArrayPositions[i]]['cost']);\n    }\n\n    return deckCostArray;\n  };\n\n  const getDeckAvgElixir = () => {\n    let deckCostArray = getDeckCostArray();\n\n    const reducer = (acc, cur) => acc + cur;\n\n    let result = deckCostArray.reduce(reducer);\n    return (result / 8).toFixed(1);\n  };\n\n  const getCycleCost = () => {\n    let deckCostArray = getDeckCostArray();\n    deckCostArray = deckCostArray.sort();\n    return (deckCostArray[0] + deckCostArray[1] + deckCostArray[2] + deckCostArray[3]).toFixed(1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#df7177',\n      height: '230px',\n      margin: '15px',\n      padding: '10px'\n    },\n    className: \"row roundSquare\",\n    children: [isDeckTransparent ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        top: '20',\n        right: '0',\n        marginTop: '40px',\n        marginRight: '50px',\n        position: 'absolute',\n        borderRadius: '100px',\n        backgroundColor: '#F0E130',\n        fontSize: '40px',\n        width: '70px',\n        height: '70px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          paddingTop: '5px',\n          color: '#323'\n        },\n        children: \"!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[0] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[1] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[1])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[2] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[2])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[3] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[3])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[4] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[4])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[5] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[5])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[6] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[6])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EnemyCard, {\n          position: hasCopiedLink ? cardArrayPositions[7] : -1,\n          transparent: isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[7])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 6\n      }, this), hasCopiedLink ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          style: {\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"eleven columns\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"four columns\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"four columns\",\n                style: {\n                  backgroundColor: '#d3454e',\n                  borderRadius: '20px',\n                  marginLeft: '60px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    float: 'right',\n                    fontFamily: 'Arial Black'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: elixirImg,\n                    style: {\n                      width: '25%',\n                      float: 'right'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      color: '#A1353C',\n                      float: 'right'\n                    },\n                    children: [\" \", getDeckAvgElixir(), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 13\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 12\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"four columns\",\n                style: {\n                  backgroundColor: '#d3454e',\n                  borderRadius: '20px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    float: 'right',\n                    fontFamily: 'Arial Black'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: elixirCycleImg,\n                    style: {\n                      width: '30%',\n                      float: 'left'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      color: '#A1353C',\n                      float: 'left',\n                      marginLeft: '6px'\n                    },\n                    children: [\" \", getCycleCost(), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 341,\n                    columnNumber: 13\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 12\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: currentMode === 'player' ? true : false,\n            onClick: deleteDeck,\n            style: {\n              height: '30px',\n              backgroundColor: '#f8c828',\n              border: 'none',\n              color: '#333',\n              padding: '2px 50px 2px 50px',\n              cursor: currentMode === 'player' ? 'not-allowed' : ''\n            },\n            children: \"Delete Deck!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          disabled: currentMode === 'player' ? true : false,\n          ref: copyDeckInputRef,\n          className: \"copyLinkInput\",\n          style: {\n            width: '70%',\n            marginBottom: '10px',\n            cursor: currentMode === 'player' ? 'not-allowed' : ''\n          },\n          ype: \"text\",\n          placeholder: \"Paste deck link here\",\n          onChange: event => validateInputLink(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 4\n  }, this);\n}, \"WQtDqEX/DOqn37H5PJCY9m7JWKQ=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = EnemyDeck;\nexport default EnemyDeck;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EnemyDeck$forwardRef\");\n$RefreshReg$(_c2, \"EnemyDeck\");","map":{"version":3,"sources":["/home/pazuzu/Documents/prog/react/tcc-pazuzu/src/components/enemyDeck.js"],"names":["React","useState","useRef","useEffect","forwardRef","useImperativeHandle","EnemyCard","cards","elixirImg","elixirCycleImg","EnemyDeck","props","ref","hasCopiedLink","setHasCopiedLink","inputValue","setInputValue","cardArrayPositions","setCardArrayPositions","isDeckTransparent","setIsDeckTransparent","highlightedCardNum","setHighlightedCardNum","repeatedCardsWithDeckList","setRepeatedCardsWithDeckList","currentMode","setCurrentMode","copyDeckInputRef","deckNum","repeatedCardNumDeck1","findRepeatedCard","otherDecksRef","console","log","changeToHighlight","repeatedCardNumDeck2","getCurrentDeck","getIsTransparent","transparent","highlightCard","cardNum","adjustPairedDeckTransparency","length","changeCurrentMode","newMode","repeatedCard","deckRef","current","funcUtils","changeRepeatedCardsList","analysedDeck","i","j","cardIdToCardPosition","id","items","validateInputLink","value","alert","search","sepPos","cardIds","substring","split","map","Number","cap","cardSelectorRef","changeEnemySelectionList","deleteDeck","hasCommonCardWithDeck1","hasCommonCardWithDeck2","deck1HasCommonCardWithDeck2","deck1","deck0","cardRemoveList","indexOf","includes","push","e","splice","getDeckCostArray","deckCostArray","getDeckAvgElixir","reducer","acc","cur","result","reduce","toFixed","getCycleCost","sort","backgroundColor","height","margin","padding","top","right","marginTop","marginRight","position","borderRadius","fontSize","width","textAlign","paddingTop","color","getRepeatedCardsList","marginBottom","marginLeft","float","fontFamily","border","cursor","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle  } from 'react';\n\nimport EnemyCard from './enemyCard.js';\nimport cards from '../utils/card-data.js';\n\nimport elixirImg from '../img/elixir.png';\nimport elixirCycleImg from '../img/elixir-cycle.png';\n\nconst EnemyDeck = forwardRef((props, ref) => {\n\n\tconst [hasCopiedLink, setHasCopiedLink] = useState(false);\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [cardArrayPositions, setCardArrayPositions] = useState([]);\n\tconst [isDeckTransparent, setIsDeckTransparent] = useState(false);\n\tconst [highlightedCardNum, setHighlightedCardNum] = useState(null);\n\n\tconst [repeatedCardsWithDeckList, setRepeatedCardsWithDeckList] = useState([]);\n\tconst [currentMode, setCurrentMode] = useState('player');\n\n\tconst copyDeckInputRef = useRef();\n\n\tuseEffect(() => {\t\t\n\n\t\tif (hasCopiedLink) {\t\t\t\n\n\t\t\tif (props.deckNum === 2 && !isDeckTransparent) {\n\t\t\t\tlet repeatedCardNumDeck1 = findRepeatedCard(props.otherDecksRef[0]);\n\n\t\t\t\tconsole.log(repeatedCardNumDeck1)\n\n\t\t\t\tif (repeatedCardNumDeck1 !== -1) {\n\t\t\t\t\tchangeToHighlight(repeatedCardNumDeck1, props.otherDecksRef[0]);\n\t\t\t\t\t// repeatedCardsWithDeckList.push(1);\n\t\t\t\t\t// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n\t\t\t\t\t// console.log(cardArrayPositions)\n\t\t\t\t\t// console.log(props.otherDecksRef[0].current.getCurrentDeck())\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (props.deckNum === 3 && !isDeckTransparent) {\n\t\t\t\tlet repeatedCardNumDeck1 = findRepeatedCard(props.otherDecksRef[0]);\n\n\t\t\t\tif (repeatedCardNumDeck1 !== -1) {\n\t\t\t\t\tchangeToHighlight(repeatedCardNumDeck1, props.otherDecksRef[0]);\n\t\t\t\t\t// repeatedCardsWithDeckList.push(1);\n\t\t\t\t\t// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n\t\t\t\t}\n\n\t\t\t\tlet repeatedCardNumDeck2 = findRepeatedCard(props.otherDecksRef[1]);\n\n\t\t\t\tif (repeatedCardNumDeck2 !== -1) {\n\t\t\t\t\tchangeToHighlight(repeatedCardNumDeck2, props.otherDecksRef[1]);\n\t\t\t\t\t// repeatedCardsWithDeckList.push(2);\n\t\t\t\t\t// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tuseImperativeHandle(ref, () => ({\n\t\t\n\t\tgetCurrentDeck: () => {\n\t\t\treturn cardArrayPositions;\n\t\t},\n\n\t\tgetIsTransparent: () => {\n\t\t\treturn isDeckTransparent;\n\t\t},\n\n\t\tsetIsDeckTransparent: (transparent) => {\n\t\t\tsetIsDeckTransparent(transparent);\t\n\t\t},\n\n\t\thighlightCard: (cardNum) => {\n\t\t\tsetIsDeckTransparent(true);\n\t\t\tsetHighlightedCardNum(cardNum);\t\t\t\n\t\t},\n\n\t\tadjustPairedDeckTransparency: () => {\n\t\t\tif (repeatedCardsWithDeckList.length > 0) {\n\n\t\t\t} else {\n\t\t\t\tsetIsDeckTransparent(false);\n\t\t\t}\n\t\t},\n\n\t\tchangeCurrentMode: (newMode) => {\n\t\t\tsetCurrentMode(newMode);\n\t\t}\n\t}));\n\n\tconst changeToHighlight = (repeatedCard, deckRef) => {\n\t\tsetIsDeckTransparent(true);\t\t\n\t\tdeckRef.current.setIsDeckTransparent(true);\n\t\tprops.funcUtils.changeRepeatedCardsList('add', repeatedCard);\n\t\tconsole.log(cardArrayPositions)\n\t\tconsole.log(props.otherDecksRef[0].current.getCurrentDeck())\n\t\t// setHighlightedCardNum(repeatedCard);\t\t\n\t\t\n\t}\n\n\tconst findRepeatedCard = (deckRef) => {\n\n\t\tlet analysedDeck = deckRef.current.getCurrentDeck();\n\n\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\tfor (let j = 0; j < analysedDeck.length; j ++) {\n\t\t\t\tif (cardArrayPositions[i] === analysedDeck[j]) {\n\t\t\t\t\treturn cardArrayPositions[i];\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tconst cardIdToCardPosition = (id) => {\t\t\n\t\t\n\t\tfor (let i = 0; i < cards.items.length; i ++) {\t\t\t\t\t\t\n\t\t\tif (cards.items[i].id === id) {\t\t\t\t\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst validateInputLink = (value) => {\t\t\t\t\n\n\t\tif (props.deckNum === 2 && props.otherDecksRef[0].current.getCurrentDeck().length === 0) {\n\t\t\talert('Please copy decks from top slot to bottom');\n\t\t\tcopyDeckInputRef.current.value ='';\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\tif (props.deckNum === 3 && (props.otherDecksRef[0].current.getCurrentDeck().length === 0\n\t\t\t\t\t\t\t\t|| props.otherDecksRef[1].current.getCurrentDeck().length === 0)) {\n\t\t\talert('Please copy decks from top slot to bottom');\n\t\t\tcopyDeckInputRef.current.value ='';\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (value.search('https://link.clashroyale.com/deck/') === -1) return;\n\n\t\tlet sepPos = value.search('=');\n\n\t\tif (sepPos === -1) return;\n\n\t\tlet cardIds = value.substring(sepPos + 1).split(';').map(Number);\t\t\n\t\tlet cap = cardIds.map(id => cardIdToCardPosition(id));\t\t\n\n\t\tsetHasCopiedLink(true);\n\t\tsetCardArrayPositions(cap);\n\n\t\tprops.cardSelectorRef.current.changeEnemySelectionList('add', cap);\n\t}\t\n\n\tconst deleteDeck = () => {\n\n\t\tif (props.deckNum === 1 && (props.otherDecksRef[0].current.getCurrentDeck().length > 0\n\t\t\t\t\t\t\t\t|| props.otherDecksRef[1].current.getCurrentDeck().length > 0)) {\n\t\t\talert('Please delete decks from bottom to top');\n\t\t\treturn;\n\t\t}\n\n\t\tif (props.deckNum === 2 && props.otherDecksRef[1].current.getCurrentDeck().length > 0) {\t\t\t\t\t\t\t\t \n\t\t\talert('Please delete decks from bottom to top');\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasCommonCardWithDeck1 = false;\n\t\tlet hasCommonCardWithDeck2 = false;\n\t\tlet deck1HasCommonCardWithDeck2 = false;\n\n\t\tif (props.deckNum === 3) {\n\t\t\tlet deck1 = props.otherDecksRef[1].current.getCurrentDeck();\n\t\t\tlet deck0 = props.otherDecksRef[0].current.getCurrentDeck();\n\t\t\tlet cardRemoveList = [];\n\t\t\t\n\n\t\t\tfor (let i = 0; i < deck1.length; i ++) {\n\t\t\t\tif (cardArrayPositions.indexOf(deck1[i]) !== -1) {\n\t\t\t\t\tif (!deck0.includes(deck1[i])) {\n\t\t\t\t\t\tcardRemoveList.push(deck1[i]);\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\thasCommonCardWithDeck2 = true;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\n\t\t\tfor (let i = 0; i < deck0.length; i ++) {\n\t\t\t\tif (cardArrayPositions.indexOf(deck0[i]) !== -1) {\n\t\t\t\t\tif (!deck1.includes(deck0[i])) {\n\t\t\t\t\t\tcardRemoveList.push(deck0[i]);\t\t\t\t\t\t\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\thasCommonCardWithDeck1 = true;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < deck0.length; i ++) {\n\t\t\t\tif (deck0.indexOf(deck1[i]) !== -1) {\n\t\t\t\t\tdeck1HasCommonCardWithDeck2 = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!deck1HasCommonCardWithDeck2) {\t\t\t\t\n\t\t\t\tif (hasCommonCardWithDeck1) props.otherDecksRef[0].current.setIsDeckTransparent(false);\n\t\t\t\tif (hasCommonCardWithDeck2) props.otherDecksRef[1].current.setIsDeckTransparent(false);\n\t\t\t}\n\n\t\t\tcardRemoveList.map(e => {\n\t\t\t\tif (deck0.includes(e) || deck1.includes(e)) {\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(e), 1);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcardArrayPositions.map(e => {\n\t\t\t\tif (deck0.includes(e) || deck1.includes(e)) {\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(e), 1);\n\t\t\t\t}\n\t\t\t})\n/*\n\t\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\t\tif (cardRemoveList.indexOf(cardArrayPositions[i]) !== -1 &&\n\t\t\t\t\t\t\t\t  (!deck0.includes(cardArrayPositions[i]) && !deck1.includes(cardArrayPositions[i]))\n\t\t\t\t\t\t\t\t  ) {\n\t\t\t\t\tconsole.log('indice da carta a ser removida: ' + String(cardArrayPositions.indexOf(cardArrayPositions[i])))\n\t\t\t\t\tconsole.log('carta a ser removida: ' + String(cardArrayPositions[i]) + ' ' + cards['items'][cardArrayPositions[i]]['name'])\n\t\t\t\t\tconsole.log(cardArrayPositions)\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[i]), 1);\t\t\t\t\t\n\t\t\t\t\tconsole.log(cardArrayPositions)\n\t\t\t\t}\n\t\t\t}\n*/\n\t\t\tcardRemoveList.map(e => console.log(cards['items'][e]['name']))\n\n\t\t\tprops.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\t\tcardRemoveList.map(e => props.funcUtils.changeRepeatedCardsList('remove', e));\n\n\t\t} else if (props.deckNum === 2) {\n\t\t\tlet deck0 = props.otherDecksRef[0].current.getCurrentDeck();\n\t\t\tlet cardRemoveList = [];\n\n\t\t\tfor (let i = 0; i < deck0.length; i ++) {\n\t\t\t\tif (cardArrayPositions.indexOf(deck0[i]) !== -1) {\n\t\t\t\t\tcardRemoveList.push(deck0[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\t\tif (cardRemoveList.indexOf(cardArrayPositions[i]) !== -1) {\t\t\t\t\t\t\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[i]), 1);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprops.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\t\tprops.otherDecksRef[0].current.setIsDeckTransparent(false);\n\t\t\tcardRemoveList.map(e => props.funcUtils.changeRepeatedCardsList('remove', e));\t\t\t\n\n\t\t} else if (props.deckNum === 1) {\n\n\t\t\tprops.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\t}\n\n\t\t// props.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\tsetCardArrayPositions([]);\n\t\tsetHasCopiedLink(false);\t\t\n\n\t\tif (isDeckTransparent) setIsDeckTransparent(false);\t\t\n\n\t\t// TODO\n\t\t// checar quais cartas sao iguais em quais decks\n\t\t// if (carta esta em um deck e no outro nao)\n\t\t// setar para transparente ou nao de acordo\n\t}\n\n\tconst getDeckCostArray = () => {\n\n\t\tlet deckCostArray = [];\n\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\tdeckCostArray.push(cards['items'][cardArrayPositions[i]]['cost'])\n\t\t}\n\n\t\treturn deckCostArray;\n\t}\n\n\tconst getDeckAvgElixir = () => {\n\t\tlet deckCostArray = getDeckCostArray();\n\n\t\tconst reducer = (acc, cur) => acc + cur;\n\t\tlet result = deckCostArray.reduce(reducer);\n\n\t\treturn (result / 8).toFixed(1);\n\t}\n\n\tconst getCycleCost = () => {\n\t\tlet deckCostArray = getDeckCostArray();\n\n\t\tdeckCostArray = deckCostArray.sort();\n\n\t\treturn (deckCostArray[0] + deckCostArray[1] + deckCostArray[2] + deckCostArray[3]).toFixed(1);\n\t}\n\n\treturn(\n\t\t\t<div style={{backgroundColor: '#df7177', height: '230px', margin: '15px', padding: '10px'}} className=\"row roundSquare\">\n\t\t\t\t{\n\t\t\t\t\tisDeckTransparent ?\n\t\t\t\t\t\t<div style={{top: '20', right: '0', marginTop: '40px', marginRight: '50px', position: 'absolute', borderRadius: '100px', backgroundColor: '#F0E130', fontSize: '40px', width: '70px', height: '70px'}}>\n\t\t\t\t\t\t\t<div style={{textAlign: 'center', paddingTop: '5px', color: '#323'}}>\n\t\t\t\t\t\t\t\t!\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t: ''\n\t\t\t\t }\t\t\t\t\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div style={{textAlign: 'center'}} className=\"row\">\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[0] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[0]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[1] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[1]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[2] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[2]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[3] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[3]) } />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={{textAlign: 'center'}} className=\"row\">\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[4] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[4]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[5] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[5]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[6] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[6]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[7] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[7]) } />\n\t\t\t\t\t</div>\n\t\t\t\t\t{ hasCopiedLink ?\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"row\" style={{marginBottom: '10px'}}>\n\t\t\t\t\t\t\t\t<div className=\"eleven columns\">\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"four columns\">\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"four columns\" style={{backgroundColor: '#d3454e', borderRadius: '20px', marginLeft: '60px'}}>\n\t\t\t\t\t\t\t\t\t\t\t<span style={{float: 'right', fontFamily: 'Arial Black'}}> \n\t\t\t\t\t\t\t\t\t\t\t\t<img src={elixirImg} style={{width: '25%', float: 'right'}}/> \n\t\t\t\t\t\t\t\t\t\t\t\t<span style={{color: '#A1353C', float: 'right'}}> { getDeckAvgElixir() } </span> \n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"four columns\" style={{backgroundColor: '#d3454e', borderRadius: '20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t<span style={{float: 'right', fontFamily: 'Arial Black'}}> \n\t\t\t\t\t\t\t\t\t\t\t\t<img src={elixirCycleImg} style={{width: '30%', float: 'left'}}/> \n\t\t\t\t\t\t\t\t\t\t\t\t<span style={{color: '#A1353C', float: 'left', marginLeft: '6px'}}> { getCycleCost() } </span> \n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"one column\">\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div style={{textAlign: 'center'}}>\n\t\t\t\t\t\t\t\t<button disabled={currentMode === 'player' ? true : false} onClick={deleteDeck} style={{height: '30px', backgroundColor: '#f8c828', border: 'none', color: '#333', padding: '2px 50px 2px 50px', cursor: currentMode === 'player' ? 'not-allowed' : ''}}>Delete Deck!</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t : \n\t\t\t\t\t \t<div style={{textAlign: 'center'}}>\n\t\t\t\t\t\t\t<input disabled={currentMode === 'player' ? true : false} ref={copyDeckInputRef} className=\"copyLinkInput\" style={{width: '70%', marginBottom: '10px', cursor: currentMode === 'player' ? 'not-allowed' : ''}}ype=\"text\" placeholder=\"Paste deck link here\" onChange={event => validateInputLink(event.target.value)} />\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n});\n\n\nexport default EnemyDeck;"]},"metadata":{},"sourceType":"module"}