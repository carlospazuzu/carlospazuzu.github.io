{"ast":null,"code":"var _jsxFileName = \"/home/pazuzu/Documents/prog/react/tcc-pazuzu/src/components/enemyGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, forwardRef, useImperativeHandle } from 'react';\nimport EnemyDeck from './enemyDeck.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnemyGrid = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const enemyDeck1Ref = useRef();\n  const enemyDeck2Ref = useRef();\n  const enemyDeck3Ref = useRef();\n  const [currentMode, setCurrentMode] = useState('player');\n  const [repeatedCardsList, setRepeatedCardsList] = useState([]);\n  useImperativeHandle(ref, () => ({\n    changeCurrentMode: newMode => {\n      setCurrentMode(newMode);\n      enemyDeck1Ref.current.changeCurrentMode(newMode);\n      enemyDeck2Ref.current.changeCurrentMode(newMode);\n      enemyDeck3Ref.current.changeCurrentMode(newMode);\n    }\n  }));\n\n  const changeRepeatedCardsList = (action, card) => {\n    if (action === 'add') {\n      if (repeatedCardsList.includes(card)) return;\n      repeatedCardsList.push(card);\n      console.log(repeatedCardsList);\n      setRepeatedCardsList([...repeatedCardsList]);\n    } else if (action === 'remove') {\n      let cardPos = repeatedCardsList.indexOf(card);\n      console.log(cardPos);\n      if (cardPos === -1) return;\n      console.log(repeatedCardsList);\n      repeatedCardsList.splice(cardPos, 1);\n      console.log(repeatedCardsList);\n      setRepeatedCardsList([...repeatedCardsList]);\n    } else if (action === 'clean') {\n      setRepeatedCardsList([]);\n    }\n  };\n\n  const getRepeatedCardsList = () => {\n    return repeatedCardsList;\n  };\n\n  const test = () => {\n    enemyDeck1Ref.current.test();\n    console.log(enemyDeck1Ref.current.getCurrentDeck());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#d3454e',\n      width: '336px'\n    },\n    className: \"roundSquare\",\n    children: [/*#__PURE__*/_jsxDEV(EnemyDeck, {\n      deckNum: 1,\n      ref: enemyDeck1Ref,\n      cardSelectorRef: props.cardSelectorRef,\n      otherDecksRef: [enemyDeck2Ref, enemyDeck3Ref],\n      funcUtils: {\n        'changeRepeatedCardsList': changeRepeatedCardsList,\n        'getRepeatedCardsList': getRepeatedCardsList\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(EnemyDeck, {\n      deckNum: 2,\n      ref: enemyDeck2Ref,\n      cardSelectorRef: props.cardSelectorRef,\n      otherDecksRef: [enemyDeck1Ref, enemyDeck3Ref],\n      funcUtils: {\n        'changeRepeatedCardsList': changeRepeatedCardsList,\n        'getRepeatedCardsList': getRepeatedCardsList\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(EnemyDeck, {\n      deckNum: 3,\n      ref: enemyDeck3Ref,\n      cardSelectorRef: props.cardSelectorRef,\n      otherDecksRef: [enemyDeck1Ref, enemyDeck2Ref],\n      funcUtils: {\n        'changeRepeatedCardsList': changeRepeatedCardsList,\n        'getRepeatedCardsList': getRepeatedCardsList\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n}, \"0wxFtZDCYPn8l9/+Uh1x0Q9EvOE=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = EnemyGrid;\nexport default EnemyGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EnemyGrid$forwardRef\");\n$RefreshReg$(_c2, \"EnemyGrid\");","map":{"version":3,"sources":["/home/pazuzu/Documents/prog/react/tcc-pazuzu/src/components/enemyGrid.js"],"names":["React","useState","useRef","forwardRef","useImperativeHandle","EnemyDeck","EnemyGrid","props","ref","enemyDeck1Ref","enemyDeck2Ref","enemyDeck3Ref","currentMode","setCurrentMode","repeatedCardsList","setRepeatedCardsList","changeCurrentMode","newMode","current","changeRepeatedCardsList","action","card","includes","push","console","log","cardPos","indexOf","splice","getRepeatedCardsList","test","getCurrentDeck","backgroundColor","width","cardSelectorRef"],"mappings":"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","sourcesContent":["import React, { useState, useRef, forwardRef, useImperativeHandle } from 'react';\n\nimport EnemyDeck from './enemyDeck.js';\n\nconst EnemyGrid = forwardRef((props, ref) => {\n\n\tconst enemyDeck1Ref = useRef();\n\tconst enemyDeck2Ref = useRef();\n\tconst enemyDeck3Ref = useRef();\n\n\tconst [currentMode, setCurrentMode] = useState('player');\n\tconst [repeatedCardsList, setRepeatedCardsList] = useState([]);\n\n\tuseImperativeHandle(ref, () => ({\n\t\tchangeCurrentMode: (newMode) => {\n\t\t\tsetCurrentMode(newMode);\n\t\t\tenemyDeck1Ref.current.changeCurrentMode(newMode);\n\t\t\tenemyDeck2Ref.current.changeCurrentMode(newMode);\n\t\t\tenemyDeck3Ref.current.changeCurrentMode(newMode);\n\t\t}\n\t}));\n\n\tconst changeRepeatedCardsList = (action, card) => {\n\t\tif (action === 'add') {\n\t\t\tif (repeatedCardsList.includes(card)) return;\n\n\t\t\trepeatedCardsList.push(card);\n\t\t\tconsole.log(repeatedCardsList)\n\t\t\tsetRepeatedCardsList([...repeatedCardsList]);\n\t\t} else if (action === 'remove') {\n\t\t\tlet cardPos = repeatedCardsList.indexOf(card);\n\n\t\t\tconsole.log(cardPos)\n\n\t\t\tif (cardPos === -1) return;\n\t\t\tconsole.log(repeatedCardsList)\n\t\t\trepeatedCardsList.splice(cardPos, 1);\n\t\t\tconsole.log(repeatedCardsList)\n\t\t\tsetRepeatedCardsList([...repeatedCardsList]);\n\t\t} else if (action === 'clean') {\n\t\t\tsetRepeatedCardsList([]);\n\t\t}\n\t}\n\n\tconst getRepeatedCardsList = () => {\n\t\treturn repeatedCardsList;\n\t}\n\n\tconst test = () => {\t\n\t\tenemyDeck1Ref.current.test();\n\t\tconsole.log(enemyDeck1Ref.current.getCurrentDeck());\n\t}\n\n\treturn (\n\t\t<div style={{backgroundColor: '#d3454e', width: '336px'}} className=\"roundSquare\">\n\t\t\t<EnemyDeck deckNum={1} ref={enemyDeck1Ref} cardSelectorRef={props.cardSelectorRef} otherDecksRef={[enemyDeck2Ref, enemyDeck3Ref]} funcUtils={{'changeRepeatedCardsList': changeRepeatedCardsList, 'getRepeatedCardsList': getRepeatedCardsList}} />\n\t\t\t<EnemyDeck deckNum={2} ref={enemyDeck2Ref} cardSelectorRef={props.cardSelectorRef} otherDecksRef={[enemyDeck1Ref, enemyDeck3Ref]} funcUtils={{'changeRepeatedCardsList': changeRepeatedCardsList, 'getRepeatedCardsList': getRepeatedCardsList}} />\n\t\t\t<EnemyDeck deckNum={3} ref={enemyDeck3Ref} cardSelectorRef={props.cardSelectorRef} otherDecksRef={[enemyDeck1Ref, enemyDeck2Ref]} funcUtils={{'changeRepeatedCardsList': changeRepeatedCardsList, 'getRepeatedCardsList': getRepeatedCardsList}} />\n\t\t</div>\n\t);\n\n});\n\nexport default EnemyGrid;"]},"metadata":{},"sourceType":"module"}