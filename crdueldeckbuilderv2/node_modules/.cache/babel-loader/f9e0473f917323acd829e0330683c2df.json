{"ast":null,"code":"import _slicedToArray from\"/home/pazuzu/Documents/prog/react/tcc-pazuzu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,forwardRef,useImperativeHandle}from'react';import PlayerDeck from'./playerDeck.js';import{jsx as _jsx}from\"react/jsx-runtime\";var PlayerGrid=/*#__PURE__*/forwardRef(function(props,ref){var _useState=useState('player'),_useState2=_slicedToArray(_useState,2),currentMode=_useState2[0],setCurrentMode=_useState2[1];var playerDeckRefArray=[useRef(),useRef(),useRef(),useRef()];useImperativeHandle(ref,function(){return{changeCurrentMode:function changeCurrentMode(newMode){setCurrentMode(newMode);for(var i=0;i<playerDeckRefArray.length;i++){playerDeckRefArray[i].current.changeCurrentMode(newMode);}},addToAvailableDeck:function addToAvailableDeck(cardNum){for(var i=0;i<playerDeckRefArray.length;i++){var hasSuccessfullyAdded=playerDeckRefArray[i].current.addCardToDeck(cardNum);if(hasSuccessfullyAdded)return;}}};});var removeFromDeckAndMakeAvailable=function removeFromDeckAndMakeAvailable(cardNum){props.cardSelectorRef.current.removeCardFromPlayerUsedList(cardNum);};var getPlayerDeck=function getPlayerDeck(deckNum){return playerDeckRefArray[deckNum].current;};return/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:'#3cd',width:'336px'},className:\"roundSquare\",children:[0,1,2,3].map(function(n){return/*#__PURE__*/_jsx(PlayerDeck,{ref:playerDeckRefArray[n],deckNum:n,funcUtils:{'removeFromDeckAndMakeAvailable':removeFromDeckAndMakeAvailable,'getPlayerDeck':getPlayerDeck}});})});});export default PlayerGrid;","map":{"version":3,"sources":["/home/pazuzu/Documents/prog/react/tcc-pazuzu/src/components/playerGrid.js"],"names":["React","useState","useRef","forwardRef","useImperativeHandle","PlayerDeck","PlayerGrid","props","ref","currentMode","setCurrentMode","playerDeckRefArray","changeCurrentMode","newMode","i","length","current","addToAvailableDeck","cardNum","hasSuccessfullyAdded","addCardToDeck","removeFromDeckAndMakeAvailable","cardSelectorRef","removeCardFromPlayerUsedList","getPlayerDeck","deckNum","backgroundColor","width","map","n"],"mappings":"mKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,UAAlC,CAA8CC,mBAA9C,KAAyE,OAAzE,CAEA,MAAOC,CAAAA,UAAP,KAAuB,iBAAvB,C,2CAEA,GAAMC,CAAAA,UAAU,cAAGH,UAAU,CAAC,SAACI,KAAD,CAAQC,GAAR,CAAgB,eAEPP,QAAQ,CAAC,QAAD,CAFD,wCAEtCQ,WAFsC,eAEzBC,cAFyB,eAI7C,GAAMC,CAAAA,kBAAkB,CAAG,CAACT,MAAM,EAAP,CAAWA,MAAM,EAAjB,CAAqBA,MAAM,EAA3B,CAA+BA,MAAM,EAArC,CAA3B,CAGAE,mBAAmB,CAACI,GAAD,CAAM,iBAAO,CAC/BI,iBAAiB,CAAE,2BAACC,OAAD,CAAa,CAC/BH,cAAc,CAACG,OAAD,CAAd,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,kBAAkB,CAACI,MAAvC,CAA+CD,CAAC,EAAhD,CAAqD,CACpDH,kBAAkB,CAACG,CAAD,CAAlB,CAAsBE,OAAtB,CAA8BJ,iBAA9B,CAAgDC,OAAhD,EACA,CACD,CAN8B,CAQ/BI,kBAAkB,CAAE,4BAACC,OAAD,CAAa,CAChC,IAAK,GAAIJ,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,kBAAkB,CAACI,MAAvC,CAA+CD,CAAC,EAAhD,CAAqD,CACpD,GAAIK,CAAAA,oBAAoB,CAAGR,kBAAkB,CAACG,CAAD,CAAlB,CAAsBE,OAAtB,CAA8BI,aAA9B,CAA4CF,OAA5C,CAA3B,CAEA,GAAIC,oBAAJ,CAA0B,OAC1B,CACD,CAd8B,CAAP,EAAN,CAAnB,CAkBA,GAAME,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,CAACH,OAAD,CAAa,CACnDX,KAAK,CAACe,eAAN,CAAsBN,OAAtB,CAA8BO,4BAA9B,CAA2DL,OAA3D,EACA,CAFD,CAIA,GAAMM,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,OAAD,CAAa,CAClC,MAAOd,CAAAA,kBAAkB,CAACc,OAAD,CAAlB,CAA4BT,OAAnC,CACA,CAFD,CAIA,mBACC,YAAK,KAAK,CAAE,CAACU,eAAe,CAAE,MAAlB,CAA0BC,KAAK,CAAE,OAAjC,CAAZ,CAAuD,SAAS,CAAC,aAAjE,UACG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,EAAaC,GAAb,CAAiB,SAAAC,CAAC,qBAAI,KAAC,UAAD,EAAY,GAAG,CAAElB,kBAAkB,CAACkB,CAAD,CAAnC,CAAwC,OAAO,CAAEA,CAAjD,CAAoD,SAAS,CAAE,CAAC,iCAAkCR,8BAAnC,CAAmE,gBAAiBG,aAApF,CAA/D,EAAJ,EAAlB,CADH,EADD,CAMA,CAvC4B,CAA7B,CAyCA,cAAelB,CAAAA,UAAf","sourcesContent":["import React, { useState, useRef, forwardRef, useImperativeHandle } from 'react';\n\nimport PlayerDeck from './playerDeck.js';\n\nconst PlayerGrid = forwardRef((props, ref) => {\n\n\tconst [currentMode, setCurrentMode] = useState('player');\n\n\tconst playerDeckRefArray = [useRef(), useRef(), useRef(), useRef()];\n\t\n\n\tuseImperativeHandle(ref, () => ({\n\t\tchangeCurrentMode: (newMode) => {\n\t\t\tsetCurrentMode(newMode);\n\t\t\tfor (let i = 0; i < playerDeckRefArray.length; i ++) {\n\t\t\t\tplayerDeckRefArray[i].current.changeCurrentMode(newMode);\n\t\t\t}\n\t\t},\n\n\t\taddToAvailableDeck: (cardNum) => {\n\t\t\tfor (let i = 0; i < playerDeckRefArray.length; i ++) {\t\t\t\t\n\t\t\t\tlet hasSuccessfullyAdded = playerDeckRefArray[i].current.addCardToDeck(cardNum);\n\n\t\t\t\tif (hasSuccessfullyAdded) return;\n\t\t\t}\t\t\t\n\t\t},\n\t\t\n\t}));\n\n\tconst removeFromDeckAndMakeAvailable = (cardNum) => {\n\t\tprops.cardSelectorRef.current.removeCardFromPlayerUsedList(cardNum)\n\t}\n\n\tconst getPlayerDeck = (deckNum) => {\n\t\treturn playerDeckRefArray[deckNum].current;\n\t}\n\n\treturn(\n\t\t<div style={{backgroundColor: '#3cd', width: '336px'}} className=\"roundSquare\">\n\t\t\t{ [0, 1, 2, 3].map(n => <PlayerDeck ref={playerDeckRefArray[n]} deckNum={n} funcUtils={{'removeFromDeckAndMakeAvailable': removeFromDeckAndMakeAvailable, 'getPlayerDeck': getPlayerDeck}}/>) }\n\t\t</div>\n\t);\n\n});\n\nexport default PlayerGrid;"]},"metadata":{},"sourceType":"module"}