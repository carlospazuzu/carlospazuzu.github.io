{"ast":null,"code":"import _toConsumableArray from\"/home/pazuzu/Documents/prog/react/tcc-pazuzu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/pazuzu/Documents/prog/react/tcc-pazuzu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,forwardRef,useImperativeHandle}from'react';import EnemyDeck from'./enemyDeck.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EnemyGrid=/*#__PURE__*/forwardRef(function(props,ref){var enemyDeck1Ref=useRef();var enemyDeck2Ref=useRef();var enemyDeck3Ref=useRef();var _useState=useState('player'),_useState2=_slicedToArray(_useState,2),currentMode=_useState2[0],setCurrentMode=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),repeatedCardsList=_useState4[0],setRepeatedCardsList=_useState4[1];useImperativeHandle(ref,function(){return{changeCurrentMode:function changeCurrentMode(newMode){setCurrentMode(newMode);enemyDeck1Ref.current.changeCurrentMode(newMode);enemyDeck2Ref.current.changeCurrentMode(newMode);enemyDeck3Ref.current.changeCurrentMode(newMode);}};});var changeRepeatedCardsList=function changeRepeatedCardsList(action,card){if(action==='add'){if(repeatedCardsList.includes(card))return;repeatedCardsList.push(card);console.log(repeatedCardsList);setRepeatedCardsList(_toConsumableArray(repeatedCardsList));}else if(action==='remove'){var cardPos=repeatedCardsList.indexOf(card);console.log(cardPos);if(cardPos===-1)return;console.log(repeatedCardsList);repeatedCardsList.splice(cardPos,1);console.log(repeatedCardsList);setRepeatedCardsList(_toConsumableArray(repeatedCardsList));}else if(action==='clean'){setRepeatedCardsList([]);}};var getRepeatedCardsList=function getRepeatedCardsList(){return repeatedCardsList;};var test=function test(){enemyDeck1Ref.current.test();console.log(enemyDeck1Ref.current.getCurrentDeck());};return/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'#d3454e',width:'336px'},className:\"roundSquare\",children:[/*#__PURE__*/_jsx(EnemyDeck,{deckNum:1,ref:enemyDeck1Ref,cardSelectorRef:props.cardSelectorRef,otherDecksRef:[enemyDeck2Ref,enemyDeck3Ref],funcUtils:{'changeRepeatedCardsList':changeRepeatedCardsList,'getRepeatedCardsList':getRepeatedCardsList}}),/*#__PURE__*/_jsx(EnemyDeck,{deckNum:2,ref:enemyDeck2Ref,cardSelectorRef:props.cardSelectorRef,otherDecksRef:[enemyDeck1Ref,enemyDeck3Ref],funcUtils:{'changeRepeatedCardsList':changeRepeatedCardsList,'getRepeatedCardsList':getRepeatedCardsList}}),/*#__PURE__*/_jsx(EnemyDeck,{deckNum:3,ref:enemyDeck3Ref,cardSelectorRef:props.cardSelectorRef,otherDecksRef:[enemyDeck1Ref,enemyDeck2Ref],funcUtils:{'changeRepeatedCardsList':changeRepeatedCardsList,'getRepeatedCardsList':getRepeatedCardsList}})]});});export default EnemyGrid;","map":{"version":3,"sources":["/home/pazuzu/Documents/prog/react/tcc-pazuzu/src/components/enemyGrid.js"],"names":["React","useState","useRef","forwardRef","useImperativeHandle","EnemyDeck","EnemyGrid","props","ref","enemyDeck1Ref","enemyDeck2Ref","enemyDeck3Ref","currentMode","setCurrentMode","repeatedCardsList","setRepeatedCardsList","changeCurrentMode","newMode","current","changeRepeatedCardsList","action","card","includes","push","console","log","cardPos","indexOf","splice","getRepeatedCardsList","test","getCurrentDeck","backgroundColor","width","cardSelectorRef"],"mappings":"8UAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,UAAlC,CAA8CC,mBAA9C,KAAyE,OAAzE,CAEA,MAAOC,CAAAA,SAAP,KAAsB,gBAAtB,C,wFAEA,GAAMC,CAAAA,SAAS,cAAGH,UAAU,CAAC,SAACI,KAAD,CAAQC,GAAR,CAAgB,CAE5C,GAAMC,CAAAA,aAAa,CAAGP,MAAM,EAA5B,CACA,GAAMQ,CAAAA,aAAa,CAAGR,MAAM,EAA5B,CACA,GAAMS,CAAAA,aAAa,CAAGT,MAAM,EAA5B,CAJ4C,cAMND,QAAQ,CAAC,QAAD,CANF,wCAMrCW,WANqC,eAMxBC,cANwB,8BAOMZ,QAAQ,CAAC,EAAD,CAPd,yCAOrCa,iBAPqC,eAOlBC,oBAPkB,eAS5CX,mBAAmB,CAACI,GAAD,CAAM,iBAAO,CAC/BQ,iBAAiB,CAAE,2BAACC,OAAD,CAAa,CAC/BJ,cAAc,CAACI,OAAD,CAAd,CACAR,aAAa,CAACS,OAAd,CAAsBF,iBAAtB,CAAwCC,OAAxC,EACAP,aAAa,CAACQ,OAAd,CAAsBF,iBAAtB,CAAwCC,OAAxC,EACAN,aAAa,CAACO,OAAd,CAAsBF,iBAAtB,CAAwCC,OAAxC,EACA,CAN8B,CAAP,EAAN,CAAnB,CASA,GAAME,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,MAAD,CAASC,IAAT,CAAkB,CACjD,GAAID,MAAM,GAAK,KAAf,CAAsB,CACrB,GAAIN,iBAAiB,CAACQ,QAAlB,CAA2BD,IAA3B,CAAJ,CAAsC,OAEtCP,iBAAiB,CAACS,IAAlB,CAAuBF,IAAvB,EACAG,OAAO,CAACC,GAAR,CAAYX,iBAAZ,EACAC,oBAAoB,oBAAKD,iBAAL,EAApB,CACA,CAND,IAMO,IAAIM,MAAM,GAAK,QAAf,CAAyB,CAC/B,GAAIM,CAAAA,OAAO,CAAGZ,iBAAiB,CAACa,OAAlB,CAA0BN,IAA1B,CAAd,CAEAG,OAAO,CAACC,GAAR,CAAYC,OAAZ,EAEA,GAAIA,OAAO,GAAK,CAAC,CAAjB,CAAoB,OACpBF,OAAO,CAACC,GAAR,CAAYX,iBAAZ,EACAA,iBAAiB,CAACc,MAAlB,CAAyBF,OAAzB,CAAkC,CAAlC,EACAF,OAAO,CAACC,GAAR,CAAYX,iBAAZ,EACAC,oBAAoB,oBAAKD,iBAAL,EAApB,CACA,CAVM,IAUA,IAAIM,MAAM,GAAK,OAAf,CAAwB,CAC9BL,oBAAoB,CAAC,EAAD,CAApB,CACA,CACD,CApBD,CAsBA,GAAMc,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CAClC,MAAOf,CAAAA,iBAAP,CACA,CAFD,CAIA,GAAMgB,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CAClBrB,aAAa,CAACS,OAAd,CAAsBY,IAAtB,GACAN,OAAO,CAACC,GAAR,CAAYhB,aAAa,CAACS,OAAd,CAAsBa,cAAtB,EAAZ,EACA,CAHD,CAKA,mBACC,aAAK,KAAK,CAAE,CAACC,eAAe,CAAE,SAAlB,CAA6BC,KAAK,CAAE,OAApC,CAAZ,CAA0D,SAAS,CAAC,aAApE,wBACC,KAAC,SAAD,EAAW,OAAO,CAAE,CAApB,CAAuB,GAAG,CAAExB,aAA5B,CAA2C,eAAe,CAAEF,KAAK,CAAC2B,eAAlE,CAAmF,aAAa,CAAE,CAACxB,aAAD,CAAgBC,aAAhB,CAAlG,CAAkI,SAAS,CAAE,CAAC,0BAA2BQ,uBAA5B,CAAqD,uBAAwBU,oBAA7E,CAA7I,EADD,cAEC,KAAC,SAAD,EAAW,OAAO,CAAE,CAApB,CAAuB,GAAG,CAAEnB,aAA5B,CAA2C,eAAe,CAAEH,KAAK,CAAC2B,eAAlE,CAAmF,aAAa,CAAE,CAACzB,aAAD,CAAgBE,aAAhB,CAAlG,CAAkI,SAAS,CAAE,CAAC,0BAA2BQ,uBAA5B,CAAqD,uBAAwBU,oBAA7E,CAA7I,EAFD,cAGC,KAAC,SAAD,EAAW,OAAO,CAAE,CAApB,CAAuB,GAAG,CAAElB,aAA5B,CAA2C,eAAe,CAAEJ,KAAK,CAAC2B,eAAlE,CAAmF,aAAa,CAAE,CAACzB,aAAD,CAAgBC,aAAhB,CAAlG,CAAkI,SAAS,CAAE,CAAC,0BAA2BS,uBAA5B,CAAqD,uBAAwBU,oBAA7E,CAA7I,EAHD,GADD,CAQA,CAzD2B,CAA5B,CA2DA,cAAevB,CAAAA,SAAf","sourcesContent":["import React, { useState, useRef, forwardRef, useImperativeHandle } from 'react';\n\nimport EnemyDeck from './enemyDeck.js';\n\nconst EnemyGrid = forwardRef((props, ref) => {\n\n\tconst enemyDeck1Ref = useRef();\n\tconst enemyDeck2Ref = useRef();\n\tconst enemyDeck3Ref = useRef();\n\n\tconst [currentMode, setCurrentMode] = useState('player');\n\tconst [repeatedCardsList, setRepeatedCardsList] = useState([]);\n\n\tuseImperativeHandle(ref, () => ({\n\t\tchangeCurrentMode: (newMode) => {\n\t\t\tsetCurrentMode(newMode);\n\t\t\tenemyDeck1Ref.current.changeCurrentMode(newMode);\n\t\t\tenemyDeck2Ref.current.changeCurrentMode(newMode);\n\t\t\tenemyDeck3Ref.current.changeCurrentMode(newMode);\n\t\t}\n\t}));\n\n\tconst changeRepeatedCardsList = (action, card) => {\n\t\tif (action === 'add') {\n\t\t\tif (repeatedCardsList.includes(card)) return;\n\n\t\t\trepeatedCardsList.push(card);\n\t\t\tconsole.log(repeatedCardsList)\n\t\t\tsetRepeatedCardsList([...repeatedCardsList]);\n\t\t} else if (action === 'remove') {\n\t\t\tlet cardPos = repeatedCardsList.indexOf(card);\n\n\t\t\tconsole.log(cardPos)\n\n\t\t\tif (cardPos === -1) return;\n\t\t\tconsole.log(repeatedCardsList)\n\t\t\trepeatedCardsList.splice(cardPos, 1);\n\t\t\tconsole.log(repeatedCardsList)\n\t\t\tsetRepeatedCardsList([...repeatedCardsList]);\n\t\t} else if (action === 'clean') {\n\t\t\tsetRepeatedCardsList([]);\n\t\t}\n\t}\n\n\tconst getRepeatedCardsList = () => {\n\t\treturn repeatedCardsList;\n\t}\n\n\tconst test = () => {\t\n\t\tenemyDeck1Ref.current.test();\n\t\tconsole.log(enemyDeck1Ref.current.getCurrentDeck());\n\t}\n\n\treturn (\n\t\t<div style={{backgroundColor: '#d3454e', width: '336px'}} className=\"roundSquare\">\n\t\t\t<EnemyDeck deckNum={1} ref={enemyDeck1Ref} cardSelectorRef={props.cardSelectorRef} otherDecksRef={[enemyDeck2Ref, enemyDeck3Ref]} funcUtils={{'changeRepeatedCardsList': changeRepeatedCardsList, 'getRepeatedCardsList': getRepeatedCardsList}} />\n\t\t\t<EnemyDeck deckNum={2} ref={enemyDeck2Ref} cardSelectorRef={props.cardSelectorRef} otherDecksRef={[enemyDeck1Ref, enemyDeck3Ref]} funcUtils={{'changeRepeatedCardsList': changeRepeatedCardsList, 'getRepeatedCardsList': getRepeatedCardsList}} />\n\t\t\t<EnemyDeck deckNum={3} ref={enemyDeck3Ref} cardSelectorRef={props.cardSelectorRef} otherDecksRef={[enemyDeck1Ref, enemyDeck2Ref]} funcUtils={{'changeRepeatedCardsList': changeRepeatedCardsList, 'getRepeatedCardsList': getRepeatedCardsList}} />\n\t\t</div>\n\t);\n\n});\n\nexport default EnemyGrid;"]},"metadata":{},"sourceType":"module"}