{"ast":null,"code":"import _slicedToArray from\"/home/pazuzu/Documents/prog/react/tcc-pazuzu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,useEffect,forwardRef,useImperativeHandle}from'react';import EnemyCard from'./enemyCard.js';import cards from'../utils/card-data.js';import elixirImg from'../img/elixir.png';import elixirCycleImg from'../img/elixir-cycle.png';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EnemyDeck=/*#__PURE__*/forwardRef(function(props,ref){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),hasCopiedLink=_useState2[0],setHasCopiedLink=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),inputValue=_useState4[0],setInputValue=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),cardArrayPositions=_useState6[0],setCardArrayPositions=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isDeckTransparent=_useState8[0],_setIsDeckTransparent=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),highlightedCardNum=_useState10[0],setHighlightedCardNum=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),repeatedCardsWithDeckList=_useState12[0],setRepeatedCardsWithDeckList=_useState12[1];var _useState13=useState('player'),_useState14=_slicedToArray(_useState13,2),currentMode=_useState14[0],setCurrentMode=_useState14[1];var copyDeckInputRef=useRef();useEffect(function(){if(hasCopiedLink){if(props.deckNum===2&&!isDeckTransparent){var repeatedCardNumDeck1=findRepeatedCard(props.otherDecksRef[0]);console.log(repeatedCardNumDeck1);if(repeatedCardNumDeck1!==-1){changeToHighlight(repeatedCardNumDeck1,props.otherDecksRef[0]);// repeatedCardsWithDeckList.push(1);\n// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n// console.log(cardArrayPositions)\n// console.log(props.otherDecksRef[0].current.getCurrentDeck())\t\t\t\t\t\n}}else if(props.deckNum===3&&!isDeckTransparent){var _repeatedCardNumDeck=findRepeatedCard(props.otherDecksRef[0]);if(_repeatedCardNumDeck!==-1){changeToHighlight(_repeatedCardNumDeck,props.otherDecksRef[0]);// repeatedCardsWithDeckList.push(1);\n// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n}var repeatedCardNumDeck2=findRepeatedCard(props.otherDecksRef[1]);if(repeatedCardNumDeck2!==-1){changeToHighlight(repeatedCardNumDeck2,props.otherDecksRef[1]);// repeatedCardsWithDeckList.push(2);\n// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n}}}});useImperativeHandle(ref,function(){return{getCurrentDeck:function getCurrentDeck(){return cardArrayPositions;},getIsTransparent:function getIsTransparent(){return isDeckTransparent;},setIsDeckTransparent:function setIsDeckTransparent(transparent){_setIsDeckTransparent(transparent);},highlightCard:function highlightCard(cardNum){_setIsDeckTransparent(true);setHighlightedCardNum(cardNum);},adjustPairedDeckTransparency:function adjustPairedDeckTransparency(){if(repeatedCardsWithDeckList.length>0){}else{_setIsDeckTransparent(false);}},changeCurrentMode:function changeCurrentMode(newMode){setCurrentMode(newMode);}};});var changeToHighlight=function changeToHighlight(repeatedCard,deckRef){_setIsDeckTransparent(true);deckRef.current.setIsDeckTransparent(true);props.funcUtils.changeRepeatedCardsList('add',repeatedCard);console.log(cardArrayPositions);console.log(props.otherDecksRef[0].current.getCurrentDeck());// setHighlightedCardNum(repeatedCard);\t\t\n};var findRepeatedCard=function findRepeatedCard(deckRef){var analysedDeck=deckRef.current.getCurrentDeck();for(var i=0;i<cardArrayPositions.length;i++){for(var j=0;j<analysedDeck.length;j++){if(cardArrayPositions[i]===analysedDeck[j]){return cardArrayPositions[i];}}}return-1;};var cardIdToCardPosition=function cardIdToCardPosition(id){for(var i=0;i<cards.items.length;i++){if(cards.items[i].id===id){return i;}}};var validateInputLink=function validateInputLink(value){if(props.deckNum===2&&props.otherDecksRef[0].current.getCurrentDeck().length===0){alert('Please copy decks from top slot to bottom');copyDeckInputRef.current.value='';return;}if(props.deckNum===3&&(props.otherDecksRef[0].current.getCurrentDeck().length===0||props.otherDecksRef[1].current.getCurrentDeck().length===0)){alert('Please copy decks from top slot to bottom');copyDeckInputRef.current.value='';return;}if(value.search('https://link.clashroyale.com/deck/')===-1)return;var sepPos=value.search('=');if(sepPos===-1)return;var cardIds=value.substring(sepPos+1).split(';').map(Number);var cap=cardIds.map(function(id){return cardIdToCardPosition(id);});setHasCopiedLink(true);setCardArrayPositions(cap);props.cardSelectorRef.current.changeEnemySelectionList('add',cap);};var deleteDeck=function deleteDeck(){if(props.deckNum===1&&(props.otherDecksRef[0].current.getCurrentDeck().length>0||props.otherDecksRef[1].current.getCurrentDeck().length>0)){alert('Please delete decks from bottom to top');return;}if(props.deckNum===2&&props.otherDecksRef[1].current.getCurrentDeck().length>0){alert('Please delete decks from bottom to top');return;}var hasCommonCardWithDeck1=false;var hasCommonCardWithDeck2=false;var deck1HasCommonCardWithDeck2=false;if(props.deckNum===3){var deck1=props.otherDecksRef[1].current.getCurrentDeck();var deck0=props.otherDecksRef[0].current.getCurrentDeck();var cardRemoveList=[];for(var i=0;i<deck1.length;i++){if(cardArrayPositions.indexOf(deck1[i])!==-1){if(!deck0.includes(deck1[i])){cardRemoveList.push(deck1[i]);}hasCommonCardWithDeck2=true;}}for(var _i=0;_i<deck0.length;_i++){if(cardArrayPositions.indexOf(deck0[_i])!==-1){if(!deck1.includes(deck0[_i])){cardRemoveList.push(deck0[_i]);}hasCommonCardWithDeck1=true;}}for(var _i2=0;_i2<deck0.length;_i2++){if(deck0.indexOf(deck1[_i2])!==-1){deck1HasCommonCardWithDeck2=true;break;}}if(!deck1HasCommonCardWithDeck2){if(hasCommonCardWithDeck1)props.otherDecksRef[0].current.setIsDeckTransparent(false);if(hasCommonCardWithDeck2)props.otherDecksRef[1].current.setIsDeckTransparent(false);}cardRemoveList.map(function(e){if(deck0.includes(e)||deck1.includes(e)){cardArrayPositions.splice(cardArrayPositions.indexOf(e),1);}});cardArrayPositions.map(function(e){if(deck0.includes(e)||deck1.includes(e)){cardArrayPositions.splice(cardArrayPositions.indexOf(e),1);}});/*\n\t\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\t\tif (cardRemoveList.indexOf(cardArrayPositions[i]) !== -1 &&\n\t\t\t\t\t\t\t\t  (!deck0.includes(cardArrayPositions[i]) && !deck1.includes(cardArrayPositions[i]))\n\t\t\t\t\t\t\t\t  ) {\n\t\t\t\t\tconsole.log('indice da carta a ser removida: ' + String(cardArrayPositions.indexOf(cardArrayPositions[i])))\n\t\t\t\t\tconsole.log('carta a ser removida: ' + String(cardArrayPositions[i]) + ' ' + cards['items'][cardArrayPositions[i]]['name'])\n\t\t\t\t\tconsole.log(cardArrayPositions)\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[i]), 1);\t\t\t\t\t\n\t\t\t\t\tconsole.log(cardArrayPositions)\n\t\t\t\t}\n\t\t\t}\n*/cardRemoveList.map(function(e){return console.log(cards['items'][e]['name']);});props.cardSelectorRef.current.changeEnemySelectionList('remove',cardArrayPositions);cardRemoveList.map(function(e){return props.funcUtils.changeRepeatedCardsList('remove',e);});}else if(props.deckNum===2){var _deck=props.otherDecksRef[0].current.getCurrentDeck();var _cardRemoveList=[];for(var _i3=0;_i3<_deck.length;_i3++){if(cardArrayPositions.indexOf(_deck[_i3])!==-1){_cardRemoveList.push(_deck[_i3]);}}for(var _i4=0;_i4<cardArrayPositions.length;_i4++){if(_cardRemoveList.indexOf(cardArrayPositions[_i4])!==-1){cardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[_i4]),1);}}props.cardSelectorRef.current.changeEnemySelectionList('remove',cardArrayPositions);props.otherDecksRef[0].current.setIsDeckTransparent(false);_cardRemoveList.map(function(e){return props.funcUtils.changeRepeatedCardsList('remove',e);});}else if(props.deckNum===1){props.cardSelectorRef.current.changeEnemySelectionList('remove',cardArrayPositions);}// props.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\nsetCardArrayPositions([]);setHasCopiedLink(false);if(isDeckTransparent)_setIsDeckTransparent(false);// TODO\n// checar quais cartas sao iguais em quais decks\n// if (carta esta em um deck e no outro nao)\n// setar para transparente ou nao de acordo\n};var getDeckCostArray=function getDeckCostArray(){var deckCostArray=[];for(var i=0;i<cardArrayPositions.length;i++){deckCostArray.push(cards['items'][cardArrayPositions[i]]['cost']);}return deckCostArray;};var getDeckAvgElixir=function getDeckAvgElixir(){var deckCostArray=getDeckCostArray();var reducer=function reducer(acc,cur){return acc+cur;};var result=deckCostArray.reduce(reducer);return(result/8).toFixed(1);};var getCycleCost=function getCycleCost(){var deckCostArray=getDeckCostArray();deckCostArray=deckCostArray.sort();return(deckCostArray[0]+deckCostArray[1]+deckCostArray[2]+deckCostArray[3]).toFixed(1);};return/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'#df7177',height:'230px',margin:'15px',padding:'10px'},className:\"row roundSquare\",children:[isDeckTransparent?/*#__PURE__*/_jsx(\"div\",{style:{top:'20',right:'0',marginTop:'40px',marginRight:'50px',position:'absolute',borderRadius:'100px',backgroundColor:'#F0E130',fontSize:'40px',width:'70px',height:'70px'},children:/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',paddingTop:'5px',color:'#323'},children:\"!\"})}):'',/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},className:\"row\",children:[/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[0]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[0])}),/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[1]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[1])}),/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[2]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[2])}),/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[3]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[3])})]}),/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},className:\"row\",children:[/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[4]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[4])}),/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[5]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[5])}),/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[6]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[6])}),/*#__PURE__*/_jsx(EnemyCard,{position:hasCopiedLink?cardArrayPositions[7]:-1,transparent:isDeckTransparent&&!props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[7])})]}),hasCopiedLink?/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row\",style:{marginBottom:'10px'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"eleven columns\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"four columns\"}),/*#__PURE__*/_jsx(\"div\",{className:\"four columns\",style:{backgroundColor:'#d3454e',borderRadius:'20px',marginLeft:'60px'},children:/*#__PURE__*/_jsxs(\"span\",{style:{float:'right',fontFamily:'Arial Black'},children:[/*#__PURE__*/_jsx(\"img\",{src:elixirImg,style:{width:'25%',float:'right'}}),/*#__PURE__*/_jsxs(\"span\",{style:{color:'#A1353C',float:'right'},children:[\" \",getDeckAvgElixir(),\" \"]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"four columns\",style:{backgroundColor:'#d3454e',borderRadius:'20px'},children:/*#__PURE__*/_jsxs(\"span\",{style:{float:'right',fontFamily:'Arial Black'},children:[/*#__PURE__*/_jsx(\"img\",{src:elixirCycleImg,style:{width:'30%',float:'left'}}),/*#__PURE__*/_jsxs(\"span\",{style:{color:'#A1353C',float:'left',marginLeft:'6px'},children:[\" \",getCycleCost(),\" \"]})]})})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"one column\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center'},children:/*#__PURE__*/_jsx(\"button\",{disabled:currentMode==='player'?true:false,onClick:deleteDeck,style:{height:'30px',backgroundColor:'#f8c828',border:'none',color:'#333',padding:'2px 50px 2px 50px',cursor:currentMode==='player'?'not-allowed':''},children:\"Delete Deck!\"})})]}):/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center'},children:/*#__PURE__*/_jsx(\"input\",{disabled:currentMode==='player'?true:false,ref:copyDeckInputRef,className:\"copyLinkInput\",style:{width:'70%',marginBottom:'10px',cursor:currentMode==='player'?'not-allowed':''},ype:\"text\",placeholder:\"Paste deck link here\",onChange:function onChange(event){return validateInputLink(event.target.value);}})})]})]});});export default EnemyDeck;","map":{"version":3,"sources":["/home/pazuzu/Documents/prog/react/tcc-pazuzu/src/components/enemyDeck.js"],"names":["React","useState","useRef","useEffect","forwardRef","useImperativeHandle","EnemyCard","cards","elixirImg","elixirCycleImg","EnemyDeck","props","ref","hasCopiedLink","setHasCopiedLink","inputValue","setInputValue","cardArrayPositions","setCardArrayPositions","isDeckTransparent","setIsDeckTransparent","highlightedCardNum","setHighlightedCardNum","repeatedCardsWithDeckList","setRepeatedCardsWithDeckList","currentMode","setCurrentMode","copyDeckInputRef","deckNum","repeatedCardNumDeck1","findRepeatedCard","otherDecksRef","console","log","changeToHighlight","repeatedCardNumDeck2","getCurrentDeck","getIsTransparent","transparent","highlightCard","cardNum","adjustPairedDeckTransparency","length","changeCurrentMode","newMode","repeatedCard","deckRef","current","funcUtils","changeRepeatedCardsList","analysedDeck","i","j","cardIdToCardPosition","id","items","validateInputLink","value","alert","search","sepPos","cardIds","substring","split","map","Number","cap","cardSelectorRef","changeEnemySelectionList","deleteDeck","hasCommonCardWithDeck1","hasCommonCardWithDeck2","deck1HasCommonCardWithDeck2","deck1","deck0","cardRemoveList","indexOf","includes","push","e","splice","getDeckCostArray","deckCostArray","getDeckAvgElixir","reducer","acc","cur","result","reduce","toFixed","getCycleCost","sort","backgroundColor","height","margin","padding","top","right","marginTop","marginRight","position","borderRadius","fontSize","width","textAlign","paddingTop","color","getRepeatedCardsList","marginBottom","marginLeft","float","fontFamily","border","cursor","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle  } from 'react';\n\nimport EnemyCard from './enemyCard.js';\nimport cards from '../utils/card-data.js';\n\nimport elixirImg from '../img/elixir.png';\nimport elixirCycleImg from '../img/elixir-cycle.png';\n\nconst EnemyDeck = forwardRef((props, ref) => {\n\n\tconst [hasCopiedLink, setHasCopiedLink] = useState(false);\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [cardArrayPositions, setCardArrayPositions] = useState([]);\n\tconst [isDeckTransparent, setIsDeckTransparent] = useState(false);\n\tconst [highlightedCardNum, setHighlightedCardNum] = useState(null);\n\n\tconst [repeatedCardsWithDeckList, setRepeatedCardsWithDeckList] = useState([]);\n\tconst [currentMode, setCurrentMode] = useState('player');\n\n\tconst copyDeckInputRef = useRef();\n\n\tuseEffect(() => {\t\t\n\n\t\tif (hasCopiedLink) {\t\t\t\n\n\t\t\tif (props.deckNum === 2 && !isDeckTransparent) {\n\t\t\t\tlet repeatedCardNumDeck1 = findRepeatedCard(props.otherDecksRef[0]);\n\n\t\t\t\tconsole.log(repeatedCardNumDeck1)\n\n\t\t\t\tif (repeatedCardNumDeck1 !== -1) {\n\t\t\t\t\tchangeToHighlight(repeatedCardNumDeck1, props.otherDecksRef[0]);\n\t\t\t\t\t// repeatedCardsWithDeckList.push(1);\n\t\t\t\t\t// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n\t\t\t\t\t// console.log(cardArrayPositions)\n\t\t\t\t\t// console.log(props.otherDecksRef[0].current.getCurrentDeck())\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (props.deckNum === 3 && !isDeckTransparent) {\n\t\t\t\tlet repeatedCardNumDeck1 = findRepeatedCard(props.otherDecksRef[0]);\n\n\t\t\t\tif (repeatedCardNumDeck1 !== -1) {\n\t\t\t\t\tchangeToHighlight(repeatedCardNumDeck1, props.otherDecksRef[0]);\n\t\t\t\t\t// repeatedCardsWithDeckList.push(1);\n\t\t\t\t\t// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n\t\t\t\t}\n\n\t\t\t\tlet repeatedCardNumDeck2 = findRepeatedCard(props.otherDecksRef[1]);\n\n\t\t\t\tif (repeatedCardNumDeck2 !== -1) {\n\t\t\t\t\tchangeToHighlight(repeatedCardNumDeck2, props.otherDecksRef[1]);\n\t\t\t\t\t// repeatedCardsWithDeckList.push(2);\n\t\t\t\t\t// setRepeatedCardsWithDeckList(repeatedCardsWithDeckList);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tuseImperativeHandle(ref, () => ({\n\t\t\n\t\tgetCurrentDeck: () => {\n\t\t\treturn cardArrayPositions;\n\t\t},\n\n\t\tgetIsTransparent: () => {\n\t\t\treturn isDeckTransparent;\n\t\t},\n\n\t\tsetIsDeckTransparent: (transparent) => {\n\t\t\tsetIsDeckTransparent(transparent);\t\n\t\t},\n\n\t\thighlightCard: (cardNum) => {\n\t\t\tsetIsDeckTransparent(true);\n\t\t\tsetHighlightedCardNum(cardNum);\t\t\t\n\t\t},\n\n\t\tadjustPairedDeckTransparency: () => {\n\t\t\tif (repeatedCardsWithDeckList.length > 0) {\n\n\t\t\t} else {\n\t\t\t\tsetIsDeckTransparent(false);\n\t\t\t}\n\t\t},\n\n\t\tchangeCurrentMode: (newMode) => {\n\t\t\tsetCurrentMode(newMode);\n\t\t}\n\t}));\n\n\tconst changeToHighlight = (repeatedCard, deckRef) => {\n\t\tsetIsDeckTransparent(true);\t\t\n\t\tdeckRef.current.setIsDeckTransparent(true);\n\t\tprops.funcUtils.changeRepeatedCardsList('add', repeatedCard);\n\t\tconsole.log(cardArrayPositions)\n\t\tconsole.log(props.otherDecksRef[0].current.getCurrentDeck())\n\t\t// setHighlightedCardNum(repeatedCard);\t\t\n\t\t\n\t}\n\n\tconst findRepeatedCard = (deckRef) => {\n\n\t\tlet analysedDeck = deckRef.current.getCurrentDeck();\n\n\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\tfor (let j = 0; j < analysedDeck.length; j ++) {\n\t\t\t\tif (cardArrayPositions[i] === analysedDeck[j]) {\n\t\t\t\t\treturn cardArrayPositions[i];\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tconst cardIdToCardPosition = (id) => {\t\t\n\t\t\n\t\tfor (let i = 0; i < cards.items.length; i ++) {\t\t\t\t\t\t\n\t\t\tif (cards.items[i].id === id) {\t\t\t\t\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst validateInputLink = (value) => {\t\t\t\t\n\n\t\tif (props.deckNum === 2 && props.otherDecksRef[0].current.getCurrentDeck().length === 0) {\n\t\t\talert('Please copy decks from top slot to bottom');\n\t\t\tcopyDeckInputRef.current.value ='';\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\tif (props.deckNum === 3 && (props.otherDecksRef[0].current.getCurrentDeck().length === 0\n\t\t\t\t\t\t\t\t|| props.otherDecksRef[1].current.getCurrentDeck().length === 0)) {\n\t\t\talert('Please copy decks from top slot to bottom');\n\t\t\tcopyDeckInputRef.current.value ='';\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (value.search('https://link.clashroyale.com/deck/') === -1) return;\n\n\t\tlet sepPos = value.search('=');\n\n\t\tif (sepPos === -1) return;\n\n\t\tlet cardIds = value.substring(sepPos + 1).split(';').map(Number);\t\t\n\t\tlet cap = cardIds.map(id => cardIdToCardPosition(id));\t\t\n\n\t\tsetHasCopiedLink(true);\n\t\tsetCardArrayPositions(cap);\n\n\t\tprops.cardSelectorRef.current.changeEnemySelectionList('add', cap);\n\t}\t\n\n\tconst deleteDeck = () => {\n\n\t\tif (props.deckNum === 1 && (props.otherDecksRef[0].current.getCurrentDeck().length > 0\n\t\t\t\t\t\t\t\t|| props.otherDecksRef[1].current.getCurrentDeck().length > 0)) {\n\t\t\talert('Please delete decks from bottom to top');\n\t\t\treturn;\n\t\t}\n\n\t\tif (props.deckNum === 2 && props.otherDecksRef[1].current.getCurrentDeck().length > 0) {\t\t\t\t\t\t\t\t \n\t\t\talert('Please delete decks from bottom to top');\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasCommonCardWithDeck1 = false;\n\t\tlet hasCommonCardWithDeck2 = false;\n\t\tlet deck1HasCommonCardWithDeck2 = false;\n\n\t\tif (props.deckNum === 3) {\n\t\t\tlet deck1 = props.otherDecksRef[1].current.getCurrentDeck();\n\t\t\tlet deck0 = props.otherDecksRef[0].current.getCurrentDeck();\n\t\t\tlet cardRemoveList = [];\n\t\t\t\n\n\t\t\tfor (let i = 0; i < deck1.length; i ++) {\n\t\t\t\tif (cardArrayPositions.indexOf(deck1[i]) !== -1) {\n\t\t\t\t\tif (!deck0.includes(deck1[i])) {\n\t\t\t\t\t\tcardRemoveList.push(deck1[i]);\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\thasCommonCardWithDeck2 = true;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\n\t\t\tfor (let i = 0; i < deck0.length; i ++) {\n\t\t\t\tif (cardArrayPositions.indexOf(deck0[i]) !== -1) {\n\t\t\t\t\tif (!deck1.includes(deck0[i])) {\n\t\t\t\t\t\tcardRemoveList.push(deck0[i]);\t\t\t\t\t\t\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\thasCommonCardWithDeck1 = true;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < deck0.length; i ++) {\n\t\t\t\tif (deck0.indexOf(deck1[i]) !== -1) {\n\t\t\t\t\tdeck1HasCommonCardWithDeck2 = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!deck1HasCommonCardWithDeck2) {\t\t\t\t\n\t\t\t\tif (hasCommonCardWithDeck1) props.otherDecksRef[0].current.setIsDeckTransparent(false);\n\t\t\t\tif (hasCommonCardWithDeck2) props.otherDecksRef[1].current.setIsDeckTransparent(false);\n\t\t\t}\n\n\t\t\tcardRemoveList.map(e => {\n\t\t\t\tif (deck0.includes(e) || deck1.includes(e)) {\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(e), 1);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcardArrayPositions.map(e => {\n\t\t\t\tif (deck0.includes(e) || deck1.includes(e)) {\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(e), 1);\n\t\t\t\t}\n\t\t\t})\n/*\n\t\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\t\tif (cardRemoveList.indexOf(cardArrayPositions[i]) !== -1 &&\n\t\t\t\t\t\t\t\t  (!deck0.includes(cardArrayPositions[i]) && !deck1.includes(cardArrayPositions[i]))\n\t\t\t\t\t\t\t\t  ) {\n\t\t\t\t\tconsole.log('indice da carta a ser removida: ' + String(cardArrayPositions.indexOf(cardArrayPositions[i])))\n\t\t\t\t\tconsole.log('carta a ser removida: ' + String(cardArrayPositions[i]) + ' ' + cards['items'][cardArrayPositions[i]]['name'])\n\t\t\t\t\tconsole.log(cardArrayPositions)\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[i]), 1);\t\t\t\t\t\n\t\t\t\t\tconsole.log(cardArrayPositions)\n\t\t\t\t}\n\t\t\t}\n*/\n\t\t\tcardRemoveList.map(e => console.log(cards['items'][e]['name']))\n\n\t\t\tprops.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\t\tcardRemoveList.map(e => props.funcUtils.changeRepeatedCardsList('remove', e));\n\n\t\t} else if (props.deckNum === 2) {\n\t\t\tlet deck0 = props.otherDecksRef[0].current.getCurrentDeck();\n\t\t\tlet cardRemoveList = [];\n\n\t\t\tfor (let i = 0; i < deck0.length; i ++) {\n\t\t\t\tif (cardArrayPositions.indexOf(deck0[i]) !== -1) {\n\t\t\t\t\tcardRemoveList.push(deck0[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\t\tif (cardRemoveList.indexOf(cardArrayPositions[i]) !== -1) {\t\t\t\t\t\t\n\t\t\t\t\tcardArrayPositions.splice(cardArrayPositions.indexOf(cardArrayPositions[i]), 1);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprops.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\t\tprops.otherDecksRef[0].current.setIsDeckTransparent(false);\n\t\t\tcardRemoveList.map(e => props.funcUtils.changeRepeatedCardsList('remove', e));\t\t\t\n\n\t\t} else if (props.deckNum === 1) {\n\n\t\t\tprops.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\t}\n\n\t\t// props.cardSelectorRef.current.changeEnemySelectionList('remove', cardArrayPositions);\n\t\tsetCardArrayPositions([]);\n\t\tsetHasCopiedLink(false);\t\t\n\n\t\tif (isDeckTransparent) setIsDeckTransparent(false);\t\t\n\n\t\t// TODO\n\t\t// checar quais cartas sao iguais em quais decks\n\t\t// if (carta esta em um deck e no outro nao)\n\t\t// setar para transparente ou nao de acordo\n\t}\n\n\tconst getDeckCostArray = () => {\n\n\t\tlet deckCostArray = [];\n\t\tfor (let i = 0; i < cardArrayPositions.length; i ++) {\n\t\t\tdeckCostArray.push(cards['items'][cardArrayPositions[i]]['cost'])\n\t\t}\n\n\t\treturn deckCostArray;\n\t}\n\n\tconst getDeckAvgElixir = () => {\n\t\tlet deckCostArray = getDeckCostArray();\n\n\t\tconst reducer = (acc, cur) => acc + cur;\n\t\tlet result = deckCostArray.reduce(reducer);\n\n\t\treturn (result / 8).toFixed(1);\n\t}\n\n\tconst getCycleCost = () => {\n\t\tlet deckCostArray = getDeckCostArray();\n\n\t\tdeckCostArray = deckCostArray.sort();\n\n\t\treturn (deckCostArray[0] + deckCostArray[1] + deckCostArray[2] + deckCostArray[3]).toFixed(1);\n\t}\n\n\treturn(\n\t\t\t<div style={{backgroundColor: '#df7177', height: '230px', margin: '15px', padding: '10px'}} className=\"row roundSquare\">\n\t\t\t\t{\n\t\t\t\t\tisDeckTransparent ?\n\t\t\t\t\t\t<div style={{top: '20', right: '0', marginTop: '40px', marginRight: '50px', position: 'absolute', borderRadius: '100px', backgroundColor: '#F0E130', fontSize: '40px', width: '70px', height: '70px'}}>\n\t\t\t\t\t\t\t<div style={{textAlign: 'center', paddingTop: '5px', color: '#323'}}>\n\t\t\t\t\t\t\t\t!\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t: ''\n\t\t\t\t }\t\t\t\t\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div style={{textAlign: 'center'}} className=\"row\">\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[0] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[0]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[1] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[1]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[2] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[2]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[3] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[3]) } />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={{textAlign: 'center'}} className=\"row\">\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[4] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[4]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[5] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[5]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[6] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[6]) } />\n\t\t\t\t\t\t<EnemyCard position={hasCopiedLink ? cardArrayPositions[7] : -1} transparent={isDeckTransparent && !props.funcUtils.getRepeatedCardsList().includes(cardArrayPositions[7]) } />\n\t\t\t\t\t</div>\n\t\t\t\t\t{ hasCopiedLink ?\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"row\" style={{marginBottom: '10px'}}>\n\t\t\t\t\t\t\t\t<div className=\"eleven columns\">\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"four columns\">\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"four columns\" style={{backgroundColor: '#d3454e', borderRadius: '20px', marginLeft: '60px'}}>\n\t\t\t\t\t\t\t\t\t\t\t<span style={{float: 'right', fontFamily: 'Arial Black'}}> \n\t\t\t\t\t\t\t\t\t\t\t\t<img src={elixirImg} style={{width: '25%', float: 'right'}}/> \n\t\t\t\t\t\t\t\t\t\t\t\t<span style={{color: '#A1353C', float: 'right'}}> { getDeckAvgElixir() } </span> \n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"four columns\" style={{backgroundColor: '#d3454e', borderRadius: '20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t<span style={{float: 'right', fontFamily: 'Arial Black'}}> \n\t\t\t\t\t\t\t\t\t\t\t\t<img src={elixirCycleImg} style={{width: '30%', float: 'left'}}/> \n\t\t\t\t\t\t\t\t\t\t\t\t<span style={{color: '#A1353C', float: 'left', marginLeft: '6px'}}> { getCycleCost() } </span> \n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"one column\">\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div style={{textAlign: 'center'}}>\n\t\t\t\t\t\t\t\t<button disabled={currentMode === 'player' ? true : false} onClick={deleteDeck} style={{height: '30px', backgroundColor: '#f8c828', border: 'none', color: '#333', padding: '2px 50px 2px 50px', cursor: currentMode === 'player' ? 'not-allowed' : ''}}>Delete Deck!</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t : \n\t\t\t\t\t \t<div style={{textAlign: 'center'}}>\n\t\t\t\t\t\t\t<input disabled={currentMode === 'player' ? true : false} ref={copyDeckInputRef} className=\"copyLinkInput\" style={{width: '70%', marginBottom: '10px', cursor: currentMode === 'player' ? 'not-allowed' : ''}}ype=\"text\" placeholder=\"Paste deck link here\" onChange={event => validateInputLink(event.target.value)} />\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n});\n\n\nexport default EnemyDeck;"]},"metadata":{},"sourceType":"module"}